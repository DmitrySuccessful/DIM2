import { state, updateBalance } from './state.js';

// –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
const autoClickerIntervals = new Map();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è
function getUpgradePrice(upgrade) {
    return Math.floor(upgrade.basePrice * Math.pow(upgrade.priceMultiplier, upgrade.level));
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
export function buyUpgrade(type) {
    const upgrade = state.upgrades[type];
    const price = getUpgradePrice(upgrade);
    
    if (state.balance >= price) {
        // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        updateBalance(-price);
        
        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        upgrade.level++;
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
        applyUpgradeEffect(type);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        updateUpgradeUI(type);
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        if (window.sounds && sounds.levelUp) {
            sounds.levelUp.play();
        }
        
        return true;
    }
    
    return false;
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
function applyUpgradeEffect(type) {
    switch (type) {
        case 'autoClicker':
            updateAutoClicker();
            break;
        case 'clickMultiplier':
            updateClickMultiplier();
            break;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
function updateAutoClicker() {
    const autoClicker = state.upgrades.autoClicker;
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (autoClickerIntervals.has(autoClicker.level - 1)) {
        clearInterval(autoClickerIntervals.get(autoClicker.level - 1));
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (autoClicker.level > 0) {
        const interval = setInterval(() => {
            const income = autoClicker.baseIncome * autoClicker.level;
            updateBalance(income);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            const coin = document.getElementById('coin');
            if (coin) {
                const rect = coin.getBoundingClientRect();
                const x = rect.left + rect.width / 2;
                const y = rect.top + rect.height / 2;
                createParticles(x - rect.left, y - rect.top);
            }
        }, autoClicker.interval);
        
        autoClickerIntervals.set(autoClicker.level, interval);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è –∫–ª–∏–∫–∞
function updateClickMultiplier() {
    const multiplier = state.upgrades.clickMultiplier;
    state.clickValue = state.baseClickValue * Math.pow(multiplier.multiplier, multiplier.level);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    document.getElementById('per-click').textContent = state.clickValue;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–ª—É—á—à–µ–Ω–∏–π
function updateUpgradeUI(type) {
    const upgrade = state.upgrades[type];
    const element = document.querySelector(`[data-upgrade="${type}"]`);
    
    if (element) {
        const price = getUpgradePrice(upgrade);
        const priceElement = element.querySelector('.upgrade-price');
        const levelElement = element.querySelector('.upgrade-level');
        
        if (priceElement) {
            priceElement.textContent = price;
        }
        
        if (levelElement) {
            levelElement.textContent = upgrade.level;
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        gsap.from(element, {
            scale: 1.1,
            duration: 0.3,
            ease: 'power2.out'
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
export function initUpgrades() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π
    const container = document.createElement('div');
    container.className = 'upgrades-container';
    
    // –ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
    const autoClicker = createUpgradeElement({
        type: 'autoClicker',
        name: '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É',
        icon: 'ü§ñ'
    });
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–ª–∏–∫–∞
    const clickMultiplier = createUpgradeElement({
        type: 'clickMultiplier',
        name: '–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∫–ª–∏–∫–∞',
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞ –∫–ª–∏–∫',
        icon: '‚ú®'
    });
    
    container.appendChild(autoClicker);
    container.appendChild(clickMultiplier);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const main = document.getElementById('main');
    if (main) {
        main.appendChild(container);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    Object.keys(state.upgrades).forEach(type => {
        if (state.upgrades[type].level > 0) {
            applyUpgradeEffect(type);
        }
        updateUpgradeUI(type);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è
function createUpgradeElement({ type, name, description, icon }) {
    const upgrade = state.upgrades[type];
    const price = getUpgradePrice(upgrade);
    
    const element = document.createElement('div');
    element.className = 'upgrade';
    element.dataset.upgrade = type;
    
    element.innerHTML = `
        <div class="upgrade-icon">${icon}</div>
        <div class="upgrade-info">
            <h3>${name}</h3>
            <p>${description}</p>
            <div class="upgrade-stats">
                <span>–£—Ä–æ–≤–µ–Ω—å: <span class="upgrade-level">${upgrade.level}</span></span>
                <span>–¶–µ–Ω–∞: <span class="upgrade-price">${price}</span></span>
            </div>
        </div>
        <button class="upgrade-button">–ö—É–ø–∏—Ç—å</button>
    `;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞
    const button = element.querySelector('.upgrade-button');
    button.addEventListener('click', () => {
        if (buyUpgrade(type)) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
            gsap.from(button, {
                scale: 0.9,
                duration: 0.2,
                ease: 'power2.out'
            });
        } else {
            // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫–∞–∑–∞
            gsap.to(button, {
                x: [-5, 5, -5, 5, 0],
                duration: 0.3,
                ease: 'power2.out'
            });
        }
    });
    
    return element;
} 